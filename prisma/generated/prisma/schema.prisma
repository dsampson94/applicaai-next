generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  username     String        @unique
  email        String        @unique
  password     String
  role         UserRole      @default(USER)
  profiles     UserProfile[]
  applications Application[]
  accounts     Account[]
  sessions     Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model Application {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  role                   String
  company                String
  status                 String
  userId                 String    @db.ObjectId
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  appliedAt              DateTime  @default(now())
  interviewDate          DateTime?
  offerDate              DateTime?
  unsuccessfulDate       DateTime?
  jobSpec                String?
  jobSpecName            String?
  cvName                 String?
  tags                   String[]
  mockInterviewResponses String[]
  suitabilityResponses   String[]
  tipsResponses          String[]
  isFavorite             Boolean   @default(false)

  user User @relation(fields: [userId], references: [id])
}

model UserProfile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  name   String
  cvs    CV[]

  user User @relation(fields: [userId], references: [id])
}

model CV {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  profileId String @db.ObjectId

  profile UserProfile @relation(fields: [profileId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}
